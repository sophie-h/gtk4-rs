initSidebarItems({"fn":[["accelerator_get_default_mod_mask","Gets the modifier mask."],["accelerator_get_label","Converts an accelerator keyval and modifier mask into a string which can be used to represent the accelerator to the user."],["accelerator_get_label_with_keycode","Converts an accelerator keyval and modifier mask into a string that can be displayed to the user."],["accelerator_name","Converts an accelerator keyval and modifier mask into a string parseable by [`accelerator_parse()`][crate::accelerator_parse()]."],["accelerator_name_with_keycode","Converts an accelerator keyval and modifier mask into a string parseable by `gtk_accelerator_parse_with_keycode()`."],["accelerator_parse","Parses a string representing an accelerator."],["binary_age","Returns the binary age as passed to `libtool`."],["check_version","Checks that the GTK library in use is compatible with the given version."],["debug_flags","Returns the GTK debug flags that are currently active."],["default_language","Returns the [`pango::Language`][crate::pango::Language] for the default language currently in effect. (Note that this can change over the life of an application.) The default language is derived from the current locale. It determines, for example, whether GTK uses the right-to-left or left-to-right text direction."],["disable_setlocale","Prevents `gtk_init` and `gtk_init_check` from automatically calling `setlocale (LC_ALL, \"\")`."],["enumerate_printers","Calls a function for all [`Printer`][crate::Printer]s."],["hsv_to_rgb","Converts a color from HSV space to RGB."],["interface_age","Returns the interface age as passed to `libtool`."],["locale_direction","Get the direction of the current locale. This is the expected reading direction for text and UI."],["major_version","Returns the major version number of the GTK library."],["micro_version","Returns the micro version number of the GTK library."],["minor_version","Returns the minor version number of the GTK library."],["print_run_page_setup_dialog","Runs a page setup dialog, letting the user modify the values from `page_setup`. If the user cancels the dialog, the returned [`PageSetup`][crate::PageSetup] is identical to the passed in `page_setup`, otherwise it contains the modifications done in the dialog."],["print_run_page_setup_dialog_async","Runs a page setup dialog, letting the user modify the values from `page_setup`."],["render_activity","Renders an activity indicator (such as in [`Spinner`][crate::Spinner]). The state [`StateFlags::CHECKED`][crate::StateFlags::CHECKED] determines whether there is activity going on."],["render_arrow","Renders an arrow pointing to `angle`."],["render_background","Renders the background of an element."],["render_check","Renders a checkmark (as in a [`CheckButton`][crate::CheckButton])."],["render_expander","Renders an expander (as used in [`TreeView`][crate::TreeView] and [`Expander`][crate::Expander]) in the area defined by `x`, `y`, `width`, `height`. The state [`StateFlags::CHECKED`][crate::StateFlags::CHECKED] determines whether the expander is collapsed or expanded."],["render_focus","Renders a focus indicator on the rectangle determined by `x`, `y`, `width`, `height`."],["render_frame","Renders a frame around the rectangle defined by `x`, `y`, `width`, `height`."],["render_handle","Renders a handle (as in [`Paned`][crate::Paned] and [`Window`][crate::Window]’s resize grip), in the rectangle determined by `x`, `y`, `width`, `height`."],["render_icon","Renders the icon in `texture` at the specified `x` and `y` coordinates."],["render_layout","Renders `layout` on the coordinates `x`, `y`"],["render_line","Renders a line from (x0, y0) to (x1, y1)."],["render_option","Renders an option mark (as in a radio button), the [`StateFlags::CHECKED`][crate::StateFlags::CHECKED] state will determine whether the option is on or off, and [`StateFlags::INCONSISTENT`][crate::StateFlags::INCONSISTENT] whether it should be marked as undefined."],["rgb_to_hsv","Converts a color from RGB space to HSV."],["set_debug_flags","Sets the GTK debug flags."],["show_uri","This function launches the default application for showing a given uri, or shows an error dialog if that fails."],["test_accessible_assertion_message_role",""],["test_accessible_has_property","Checks whether the [`Accessible`][crate::Accessible] has `property` set."],["test_accessible_has_relation","Checks whether the [`Accessible`][crate::Accessible] has `relation` set."],["test_accessible_has_role","Checks whether the `property::Accessible::accessible-role` of the accessible is `role`."],["test_accessible_has_state","Checks whether the [`Accessible`][crate::Accessible] has `state` set."],["test_register_all_types","Force registration of all core GTK object types."],["test_widget_wait_for_draw","Enters the main loop and waits for `widget` to be “drawn”."],["tree_create_row_drag_content","Creates a content provider for dragging `path` from `tree_model`."],["tree_get_row_drag_data","Obtains a `tree_model` and `path` from value of target type `GTK_TYPE_TREE_ROW_DATA`."]]});